// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  isAdmin       Boolean         @default(false)
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders Order[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Category {
  id       String   @id @default(cuid())
  createAt DateTime @default(now())
  title    String
  img      String
  slug     String   @unique

  products Product[]
  types    Type[]
}

model Type {
  id       String   @id @default(cuid())
  createAt DateTime @default(now())
  title    String
  tslug    String   @unique

  category Category @relation(fields: [catSlug], references: [slug])
  catSlug  String

  products Product[]
}

model Product {
  id       String   @id @default(cuid())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  title    String
  desc     String
  img      String
  price    Int

  category Category @relation(fields: [catSlug], references: [slug])
  catSlug  String

  type     Type   @relation(fields: [typeSlug], references: [tslug])
  typeSlug String

  orderItem Item?
}

model Order {
  id        String   @id @default(cuid())
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt
  price     Int
  products  Json[]
  status    String
  intent_id String?  @unique

  user      User   @relation(fields: [userEmail], references: [email])
  userEmail String

  items Item[]
}

model Item {
  id String @id @default(cuid())
  quantity Int
  size String?

  product Product @relation(fields: [productId], references: [id])
  productId String @unique

  order Order @relation(fields: [orderId], references: [id])
  orderId String
}
